# Note:
#   Image purpose â€º source code isolation for CI build
#   This container use a copy project source code strategy instead of using the mounting volume

FROM bats/bats:latest AS bats-core-base-img

FROM ubuntu:latest AS final

ARG CONTAINER_PROJECT_ROOT_NAME
ENV CONTAINER_PROJECT_ROOT_NAME=${CONTAINER_PROJECT_ROOT_NAME:?'Build argument needs to be set and non-empty.'}
ENV SRC_CODE_PATH="/code/${CONTAINER_PROJECT_ROOT_NAME}"

ARG N2ST_BATS_TESTING_TOOLS_RELATIVE_PATH
ENV N2ST_BATS_TESTING_TOOLS_RELATIVE_PATH=${N2ST_BATS_TESTING_TOOLS_RELATIVE_PATH:?'Build argument needs to be set and non-empty.'}

ARG TEAMCITY_VERSION
ENV TEAMCITY_VERSION=${TEAMCITY_VERSION}

ARG N2ST_VERSION
LABEL norlab.tools.norlab-shell-script-tools.tester="${N2ST_VERSION:?err}"
LABEL org.opencontainers.image.authors="luc.coupal.1@ulaval.ca"

SHELL ["/bin/bash", "-e", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

ENV TERM=${TERM:-"xterm-256color"}
ENV COLUMNS=80

# ====Begin========================================================================================
# ....Setup timezone and localization..............................................................
# change the locale from POSIX to UTF-8
RUN apt-get update && \
    apt-get install --assume-yes --no-install-recommends \
        locales && \
    rm -rf /var/lib/apt/lists/*

RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8

# ====Begin========================================================================================

# ....Install development utilities................................................................
RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        sudo \
        lsb-release \
        curl \
        wget \
        ca-certificates \
        git \
        tree \
        zip gzip tar unzip \
        fontconfig \
        software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# ....Install bats-core............................................................................
RUN ln -s /opt/bats/bin/bats /usr/local/bin/bats
COPY --from=bats-core-base-img /opt/bats/ /opt/bats/
COPY --from=bats-core-base-img /usr/lib/bats/ /usr/lib/bats/

RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
        tini \
    && rm -rf /var/lib/apt/lists/*

# ....Setup test environment.......................................................................
WORKDIR "${SRC_CODE_PATH}"

# Note:
#   About git `safe.directory` check
#       "To completely opt-out of this security check, set `safe.directory` to the string `*`.
#       This will allow all repositories to be treated as if their directory was listed in
#       the `safe.directory` list."
#       "Giving a directory with `/*` appended to it will allow access to all repositories under
#       the named directory."
#
#   Ref
#   - https://github.com/git/git/blob/313eec177ad010048b399d6fd14de871b517f7e3/Documentation/config/safe.txt#L42C1-L44C51
#   - https://github.com/git/git/blob/313eec177ad010048b399d6fd14de871b517f7e3/Documentation/config/safe.txt#L47-L48
#
#   This is required in our case since SRC_CODE_PATH will often have git submodule
RUN git config --global --add safe.directory "*"

COPY ./bats_helper_functions.bash ./tests/bats_testing_tools/bats_helper_functions.bash

## ====End=========================================================================================
WORKDIR "${SRC_CODE_PATH}"
ENTRYPOINT [ "/usr/bin/tini", "--", "bash", "bats", "--recursive", "--verbose-run", "--print-output-on-failure" ]
